# -*- coding: utf-8 -*-
"""Walmart_Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xKUY6OEC4oTTPFrvxRT_ZKRM3uKwUWir
"""



from pytrends.request import TrendReq
pytrends = TrendReq(hl='en-US', tz=360)

trending_IN = pytrends.trending_searches(pn='india')

Tech_rtst_IN=pytrends.realtime_trending_searches(pn='IN',cat='t')
Bus_rtst_IN= pytrends.realtime_trending_searches(pn='IN',cat='b')
Enter_rtst_IN= pytrends.realtime_trending_searches(pn='IN',cat='e')
Health_rtst_IN = pytrends.realtime_trending_searches(pn='IN',cat='m')
Sports_rtst_IN = pytrends.realtime_trending_searches(pn='IN',cat='s')
All_rtst_IN = pytrends.realtime_trending_searches(pn='IN',cat='all')

Tech_entities = list(Tech_rtst_IN['entityNames'])
Bus_entities = list(Bus_rtst_IN['entityNames'])
Enter_entities = list(Enter_rtst_IN['entityNames'])
Health_entities = list(Health_rtst_IN['entityNames'])
Sports_entities = list(Sports_rtst_IN['entityNames'])
All_entities = list(All_rtst_IN['entityNames'])

def extract_unique(list1:list):
  distinct = set()

  for i in range(len(list1)):
    for j in range(len(list1[i])):
      distinct.add(list1[i][j])
  return distinct

def links_returning(name:str):
  name = name.strip(' ')
  return ('https://www.walmart.com/search?q='+name)

Tech_distinct_entities = extract_unique(Tech_entities) #done
Bus_distinct_entities = extract_unique(Bus_entities) #done
Enter_distinct_entities = extract_unique(Enter_entities) #done
Health_distinct_entities = extract_unique(Health_entities) #done
Sports_distinct_entities = extract_unique(Sports_entities) #done
All_distinct_entities = extract_unique(All_entities) #done

import spacy

# Load a pre-trained spaCy NER model
nlp = spacy.load("en_core_web_sm")

def extract_products_from_text_list(text_list):
    extracted_products = []

    for text in text_list:
        doc = nlp(text)
        for ent in doc.ents:
            if ent.label_ == "ORG" or ent.label_ == "PRODUCT":
                extracted_products.append(ent.text)

    return extracted_products

# Example list of text
text_list = Tech_distinct_entities

extracted_Tech_products = extract_products_from_text_list(text_list)
print("Extracted Products:", extracted_Tech_products)

import pandas as pd
Tech_df = pd.DataFrame(extracted_Tech_products,columns=['Name'])

Tech_df['Link'] = Tech_df['Name'].apply(links_returning)

Tech_df.head(20)

Health_df = pd.DataFrame(Health_distinct_entities,columns=['Name'])

Health_df['Link'] = Health_df['Name'].apply(links_returning)

Health_df

Enter_df = pd.DataFrame(Enter_distinct_entities,columns=['Name'])

Enter_df['Link'] = Enter_df['Name'].apply(links_returning)

print(Enter_df)

import spacy

# Load a pre-trained spaCy NER model
nlp = spacy.load("en_core_web_sm")

def extract_products_from_text_list(text_list):
    extracted_products = []

    for text in text_list:
        doc = nlp(text)
        for ent in doc.ents:
            if ent.label_ == "NORP" or ent.label_ == "GPE":
              continue
            if ent.label_ == "ORG" or ent.label_ == "PRODUCT":
                extracted_products.append(ent.text)

    return extracted_products

# Example list of text
text_list = Sports_distinct_entities

extracted_Sports_products = extract_products_from_text_list(text_list)
print("Extracted Products:", extracted_Sports_products)

Sports_df = pd.DataFrame(Sports_distinct_entities,columns=['Name'])

Sports_df['Link'] = Sports_df['Name'].apply(links_returning)

Sports_df

All_distinct_entities

import spacy

# Load a pre-trained spaCy NER model
nlp = spacy.load("en_core_web_sm")
entity_tags = ["PERSON", "NORP", "FAC", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LAW", "LANGUAGE", "DATE", "TIME", "PERCENT", "MONEY", "QUANTITY", "ORDINAL", "CARDINAL"]

def extract_products_from_text_list(text_list):
    extracted_products = []

    for text in text_list:
        doc = nlp(text)
        for ent in doc.ents:
          if ent.label_ in entity_tags:
                extracted_products.append(ent.text)

    return extracted_products

# Example list of text
text_list = All_distinct_entities

extracted_All_products = extract_products_from_text_list(text_list)
print("Extracted Products:", extracted_All_products)

All_df = pd.DataFrame(All_distinct_entities,columns=['Name'])

All_df['Link'] = All_df['Name'].apply(links_returning)

All_df

import spacy

# Load a pre-trained spaCy NER model
nlp = spacy.load("en_core_web_sm")
entity_tags = ["PERSON", "ORG", "GPE", "LOC", "PRODUCT", "EVENT", "WORK_OF_ART", "LAW", "LANGUAGE", "ORDINAL", "CARDINAL"]

def extract_products_from_text_list(text_list):
    extracted_products = []

    for text in text_list:
        doc = nlp(text)
        for ent in doc.ents:
          if ent.label_ in entity_tags:
                extracted_products.append(ent.text)

    return extracted_products

# Example list of text
text_list = Bus_distinct_entities

extracted_Bus_products = extract_products_from_text_list(text_list)
print("Extracted Products:", extracted_Bus_products)

Bus_df = pd.DataFrame(extracted_Bus_products,columns=['Name'])

Bus_df['Link'] = Bus_df['Name'].apply(links_returning)

Bus_df

Tech_df.to_html()

